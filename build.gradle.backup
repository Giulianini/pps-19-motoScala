plugins {
    id "java"
    id "scala"
    id "java-library"
    id "application"
    id("org.scoverage") version "4.0.2"
    id("com.github.johnrengelman.shadow") version "6.0.0"
}

group project.project_group
version project.project_version
sourceCompatibility = project.jdkVersion

repositories {
    jcenter()
}

dependencies {
    //JAVAFX
    implementation "com.jfoenix:jfoenix:${project.jfoenixVersion}" // Java 8
    implementation "org.kordamp.ikonli:ikonli-core:${project.ikonli_coreVersion}"
    implementation "org.kordamp.ikonli:ikonli-javafx:${project.ikonli_javafxVersion}"
    implementation "org.kordamp.ikonli:ikonli-material-pack:${project.ikonli_material_packVersion}"
    implementation "org.kordamp.ikonli:ikonli-devicons-pack:${project.ikonli_material_packVersion}"
    implementation "org.kordamp.ikonli:ikonli-ionicons-pack:${project.ikonli_material_packVersion}"
    implementation "eu.hansolo.enzo:Enzo:${project.enzoVersion}"

    //SCALA FX
    implementation "org.scalafx:scalafx_2.13:${project.scalafx}"
    implementation "org.scalafx:scalafx-extras_2.13:${project.scalafx_extras}"

    //SCALA
    implementation "org.scala-lang:scala-library:${project.scala_library}"
    //testImplementation 'org.scalactic:scalactic_0.26:3.2.2'

    //SCALA TEST
    testImplementation 'org.scalatest:scalatest_2.13:3.2.2'
    testImplementation 'org.scalatestplus:junit-4-12_2.13:3.2.2.0'
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.13:1.2.0'

    //SCALA MODULES
    implementation "org.scala-lang.modules:scala-xml_2.13:${project.scala_xml}"
    implementation "org.scala-lang.modules:scala-collection-contrib_2.13:${project.scala_collection_contrib}"
    implementation "org.scala-lang.modules:scala-parallel-collections_2.13:${project.scala_parallel_collections}"
    implementation "org.scala-lang.modules:scala-async_2.13:${project.scala_async}"
    testRuntimeOnly "org.scala-lang.modules:scala-xml_2.13:${project.scala_xml}"

    //AKKA
    implementation "com.typesafe.akka:akka-actor_2.13:${project.akka}"
    implementation "com.typesafe.akka:akka-remote_2.13:${project.akka}"
    implementation "com.typesafe.akka:akka-cluster_2.13:${project.akka}"
    implementation "com.typesafe.akka:akka-cluster-tools_2.13:${project.akka}"
    //AKKA TEST
    implementation "com.typesafe.akka:akka-testkit_2.13:${project.akka}"
    //LOGGERS
    implementation "com.typesafe.akka:akka-slf4j_2.13:${project.akka}"
    implementation "ch.qos.logback:logback-parent:${project.logback_classic}"

    //SERIALIZERS
    implementation "io.altoo:akka-kryo-serialization_2.13:${project.kryo}"

    //PARSERS
    implementation "com.fasterxml.jackson.core:jackson-annotations:${project.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-core:${project.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${project.jackson}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jackson}"
}

configurations {
    scalaCompilerPlugin
}

mainClassName = 'it.unibo.pps1920.motoscala.Main'

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//Package all in a Big Fat Jar. One Main One JAR
import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
shadowJar {
    transform(AppendingTransformer) {
        resource = 'reference.conf'
    }
    mergeServiceFiles()
    with jar
}