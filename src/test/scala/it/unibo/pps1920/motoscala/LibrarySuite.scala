/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package it.unibo.pps1920.motoscala

import org.junit.runner.RunWith
import org.scalatest.BeforeAndAfter
import org.scalatest.funspec.AnyFunSpec
import org.scalatestplus.junit.JUnitRunner


@RunWith(classOf[JUnitRunner])
class ExampleSpec extends AnyFunSpec with BeforeAndAfter {

  import scala.collection.mutable

  var stack: mutable.Stack[Int] = _

  before {
    import scala.collection.mutable
    stack = new mutable.Stack[Int]
  }


  describe("A Stack") {
    describe("when empty") {
      it("should pop no values") {
        assert(stack.isEmpty)
      }
    }
    describe("when adding element") {
      it("should pop values in last-in-first-out order") {
        stack.push(1)
        stack.push(2)
        assert(stack.pop() === 2)
        assert(stack.pop() === 1)
      }

      it("should throw NoSuchElementException if an empty stack is popped") {
        intercept[NoSuchElementException] {
          stack.pop()
        }
      }
    }
  }
}

import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

@RunWith(classOf[JUnitRunner])
class SetSpec extends AnyWordSpec with Matchers {
  "A Set" when {
    "empty" should {
      "have size 0" in {
        assert(Set.empty.isEmpty)
      }

      "produce NoSuchElementException when head is invoked" in {
        assertThrows[NoSuchElementException] {
          Set.empty.head
        }
      }
    }
  }

  "A vector" when {
    "empty" should {
      "Produce 0 element at startup" in {
        assert(Vector().isEmpty)
      }
      "have one element when added" in {
        assert((Vector() :+ "ciao").nonEmpty)
      }
    }
  }

  "A new Library class" when {
    "created" should {
      "Return always true" in {
        val lib = new Library()
        lib.someLibraryMethod() shouldBe true
      }
    }
  }
}


